# Strategy to Build a Mobile App: To build a mobile app, the best route is to wrap this core Python logic in a RESTful backend and build a lightweight UI frontend
# that handles user interactions, visualization, and triggers encrypted emails.
# API backend using FastAPI
# The API backend has been dockerized
# To complement your API backend, a mobile UI skeleton for a cross-platform app using Kivy,
# which can consume the FastAPI endpoints.
# Replace "http://localhost:8000" with your deployed API endpoint (e.g., on DigitalOcean, Fly.io or Heroku).
# Option 1: Deploy on DigitalOcean App Platform (simplest, no server management)
# Option 2: Deploy with Docker on a Droplet (you manage the server)
#
# Kivy is an open-source Python framework for building multitouch applications—including mobile apps for Android, iOS,
# Windows, macOS, and Linux—using a single Python codebase
# Cross-platform Kivy
# Kivy app includes:
# A home screen with fields for matrix, node names, start/second node.
# A checkbox to toggle quantum encryption.
# Integration with the /send-condonation-email API endpoint.
# A result screen to display the encrypted response and recipients.
# this app can be packaged  as an APK
# To package your Kivy app as an APK for Android, follow these steps using Buildozer, the standard tool for Kivy deployment
#
# Step 1: Install Buildozer and Dependencies (on Linux)
# Step 2: Initialize Buildozer in Your App Directory
# Step 3: Configure buildozer.spec
# Step 4: Build the APK
# Step 5: Install APK on Android Device
#
from kivy.app import App
from kivy.lang import Builder
from kivy.uix.screenmanager import ScreenManager, Screen
import requests
import json

# === Kivy Layout (.kv equivalent) ===
KV = '''
ScreenManager:
    HomeScreen:
    ResultScreen:

<HomeScreen>:
    name: "home"
    BoxLayout:
        orientation: 'vertical'
        padding: 20
        spacing: 10

        TextInput:
            id: matrix_input
            hint_text: "Enter matrix JSON (e.g., [[0, 10, 0], [10, 0, 10], [0, 10, 0]])"
            multiline: True

        TextInput:
            id: node_input
            hint_text: "Enter node names JSON (e.g., {0: 'A', 1: 'B', 2: 'C'})"

        TextInput:
            id: start_node
            hint_text: "Start node (e.g., A)"

        TextInput:
            id: second_node
            hint_text: "Second node (e.g., B)"

        CheckBox:
            id: encrypt_toggle
            active: True
        Label:
            text: "Encrypt message (quantum-safe)"

        Button:
            text: "Analyze Cycle"
            on_press: root.analyze_cycle()

<ResultScreen>:
    name: "result"
    BoxLayout:
        orientation: 'vertical'
        padding: 20

        ScrollView:
            Label:
                id: result_label
                text: ""
                size_hint_y: None
                height: self.texture_size[1]
                text_size: self.width, None

        Button:
            text: "Back"
            size_hint_y: None
            height: 50
            on_press: app.root.current = "home"
'''

# === Screens ===
class HomeScreen(Screen):
    def analyze_cycle(self):
        try:
            matrix = json.loads(self.ids.matrix_input.text.strip())
            node_names = json.loads(self.ids.node_input.text.strip())
            start_node = self.ids.start_node.text.strip()
            second_node = self.ids.second_node.text.strip()
            encrypt = self.ids.encrypt_toggle.active
        except Exception as e:
            self.manager.get_screen("result").ids.result_label.text = f"❌ Input error: {e}"
            self.manager.current = "result"
            return

        payload = {
            "matrix": matrix,
            "node_names": node_names,
            "start_node": start_node,
            "second_node": second_node,
            "encrypt": encrypt
        }

        try:
            response = requests.post("http://localhost:8000/send-condonation-email", json=payload)
            if response.status_code == 200:
                data = response.json()
                result = (
                    f"✅ Email Sent Successfully!\n\n"
                    f"Cycle: {data['cycle']}\n"
                    f"Min Transfer: {data['min_transfer']}\n\n"
                    f"Recipients: {', '.join(data['recipients'])}\n\n"
                    f"Encrypted Body:\n{data['encrypted_body']}"
                )
            else:
                result = f"❌ Server error: {response.status_code}\n{response.text}"
        except Exception as e:
            result = f"❌ Request failed: {e}"

        self.manager.get_screen("result").ids.result_label.text = result
        self.manager.current = "result"

class ResultScreen(Screen):
    pass

# === App ===
class DebtCycleApp(App):
    def build(self):
        return Builder.load_string(KV)

if __name__ == "__main__":
    DebtCycleApp().run()
